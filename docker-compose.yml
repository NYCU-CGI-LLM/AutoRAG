version: '3'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: autorag_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: autorag-minio
    ports:
      - "9000:9000"      # MinIO API
      - "9001:9001"      # MinIO Console
    environment:
      MINIO_ROOT_USER: adminadmin
      MINIO_ROOT_PASSWORD: adminadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  # Optional: Create bucket automatically
  createbuckets:
    image: minio/mc:latest
    container_name: autorag-minio-buckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/autorag-files --ignore-existing;
      /usr/bin/mc policy set public myminio/autorag-files;
      exit 0;
      "
    networks:
      - app-network

  # api:
  #   build:
  #     context: ./api
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./api:/app/api
  #     - ./projects:/app/projects
  #   working_dir: /app/api
  #   ports:
  #     - "8001:8000"
  #     - "7690:7690" # for panel report
  #     - "8501:8501" # for streamlit chat
  #     - "8100:8100" # for chat API server
  #   environment:
  #     - WATCHFILES_FORCE_POLLING=true  # Docker on Windows/macOS를 위한 설정
  #     - TZ=Asia/Seoul
  #     - PYTHONPATH=/app/api
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #     - LOG_LEVEL=DEBUG     # 로그 레벨 설정
  #     - PYTHONUNBUFFERED=1  # Python 출력 버퍼링 비활성화
  #     - DATABASE_URL=postgresql://autorag_user:autorag_password@postgres:5432/autorag_db
  #     - MINIO_ENDPOINT=minio:9000
  #     - MINIO_ACCESS_KEY=minioadmin
  #     - MINIO_SECRET_KEY=minioadmin
  #     - MINIO_SECURE=false
  #     - MINIO_BUCKET_NAME=autorag-files
  #   depends_on:
  #     - redis
  #     - postgres
  #     - minio
  #   networks:
  #     - app-network

  # flower:
  #   image: mher/flower
  #   command: celery flower --broker=redis://redis:6379/0 --port=5555
  #   ports:
  #     - "5555:5555"
  #   environment:
  #     - TZ=Asia/Seoul
  #     - FLOWER_BROKER_API=redis://redis:6379/0
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   depends_on:
  #     - redis
  #     - api
  #   networks:
  #     - app-network

  # Frontend service disabled - only API server needed
  # app:
  #   build:
  #     context: ./autorag-frontend
  #     dockerfile: Dockerfile
  #     args:
  #       - NEXT_PUBLIC_API_URL=http://localhost:8000
  #       - NEXT_PUBLIC_HOST_URL=http://localhost
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #     - NEXT_PUBLIC_HOST_URL=http://localhost
  #   restart: unless-stopped
  #   depends_on:
  #     - api
  #   networks:
  #     - app-network

volumes:
  redis_data:
  postgres_data:
  minio_data:

networks:
  app-network:
    driver: bridge
